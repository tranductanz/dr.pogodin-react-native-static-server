import { type AppStateStatus, type NativeEventSubscription } from "react-native";
import { Emitter, Semaphore } from "@dr.pogodin/js-utils";
import { type ErrorLogOptions } from "./config";
import { STATES } from "./constants";
import { resolveAssetsPath } from "./utils";
export { ERROR_LOG_FILE, WORK_DIR, UPLOADS_DIR } from "./config";
export { STATES, resolveAssetsPath };
export type StateListener = (newState: STATES, details: string, error?: Error) => void;
declare class StaticServer {
    _appStateSub?: NativeEventSubscription;
    _configPath?: string;
    _errorLog?: ErrorLogOptions;
    _extraConfig: string;
    _fileDir: string;
    _hostname: string;
    _nonLocal: boolean;
    _origin: string;
    _stopInBackground: boolean;
    _port: number;
    _state: STATES;
    _stateChangeEmitter: Emitter<[STATES, string, Error | undefined]>;
    _id: number;
    _sem: Semaphore;
    _webdav?: string[];
    get errorLog(): false | ErrorLogOptions;
    get fileDir(): string;
    get hostname(): string;
    get id(): number;
    get nonLocal(): boolean;
    get origin(): string;
    get stopInBackground(): boolean;
    get port(): number;
    get state(): STATES;
    _setState(neu: STATES, details?: string, error?: Error): void;
    constructor({ errorLog, extraConfig, fileDir, hostname, id, nonLocal, port, state, stopInBackground, webdav, }: {
        extraConfig?: string;
        errorLog?: boolean | ErrorLogOptions;
        fileDir: string;
        hostname?: string;
        id?: number;
        nonLocal?: boolean;
        port?: number;
        state?: STATES;
        stopInBackground?: boolean;
        webdav?: string[];
    });
    addStateListener(listener: StateListener): () => void;
    _configureAppStateHandling(): void;
    _removeConfigFile(): Promise<void>;
    _registerSelf(): void;
    _stableStateGuard(): void;
    removeAllStateListeners(): void;
    removeStateListener(listener: StateListener): void;
    start(details?: string): Promise<string>;
    _stop(details?: string): Promise<void>;
    stop(details?: string): Promise<void>;
    _handleAppStateChange(appState: AppStateStatus): Promise<void>;
}
export default StaticServer;
export declare function getActiveServerSet(): Set<StaticServer> | undefined;
export declare function getActiveServer(): StaticServer | undefined;
export declare const getActiveServerId: () => Promise<number | null>;
